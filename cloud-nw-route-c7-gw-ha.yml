heat_template_version: 2015-10-15

description: |
   ####  Creates:
   #### - Cloud Network suitable for north-south traffic
   #### - 2 CentOS 7 gateway instances with shared IPs
   #### Author: Brian King
   #### version: 0.0.1a
   #### last modified: 2018-11-29

parameter_groups:

- label: Gateway Instance Settings
  parameters:
    - gwName
    - gwFlavor

- label: Network Settings
  parameters:
    - netRange
    - netName

- label: DNS Settings
  parameters:
    - primaryDNSIP
    - secondaryDNSIP

parameters:

#begin gw params
  gwName:
    type: string
    label: 'Name of gateway instance'
    default: 'gatewayInstance00'

  gwFlavor:
    type: string
    default: 2 GB General Purpose v1
    label: Gateway Instance Flavor Name or ID (such as 4 GB General Purpose v1)
    description: Must be a valid Rackspace Cloud Flavor
    constraints:
    - allowed_values:
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O
      - 30 GB I/O
      description: must be a valid Rackspace Cloud Server flavor.

#begin network params

  netName:
    type: string
    label: 'Cloud Network Name'
    description: Name of Cloud Network
    default: 'cloudNetwork'

  netRange:
    type: string
    label: 'Enter the first 3 octets of desired network range (such as 192.168.100)'
    default: '172.19.241'
    constraints:
      - allowed_pattern: '^(?:(?:^|\.)(?:2(?:5[0-5]|[0-4]\d)|1?\d?\d)){3}$'
        description: "please enter a valid 3 octets"

#begin DNS params

  primaryDNSIP:
    type: string
    label: 'Primary DNS Server. Mouse over the ? for each region''s DNS IPs.'
    description: 'DFW: 72.3.128.240, HKG: 120.136.32.62, IAD: 69.20.0.164, LON: 83.138.151.80, ORD: 173.203.4.8, SYD: 119.9.60.62'
    default: 72.3.128.240
    constraints:
    - allowed_values:
      - 72.3.128.240
      - 120.136.32.62
      - 69.20.0.164
      - 83.138.151.80
      - 173.203.4.8
      - 119.9.60.62

  secondaryDNSIP:
    type: string
    label: 'Secondary DNS Server. Mouse over the ? for each region''s DNS IPs.'
    description: 'DFW: 72.3.128.241, HKG: 120.136.32.63, IAD: 69.20.0.196, LON: 83.138.151.81, ORD: 173.203.4.9, SYD: 119.9.60.63'
    default: 72.3.128.241
    constraints:
    - allowed_values:
      - 72.3.128.241
      - 120.136.32.63
      - 69.20.0.196
      - 83.138.151.81
      - 173.203.4.9
      - 119.9.60.63

resources:

# begin Cloud Networks resources

  cloudNet:
    type: OS::Neutron::Net
    properties:
      name: { get_param: [netName] }

  cloudNetSubnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }
      ip_version: 4
      dns_nameservers: [{ get_param: [primaryDNSIP] }, { get_param: [secondaryDNSIP] }]
      cidr: { list_join: ['.',  [ { get_param: netRange }, '0/24' ]] }
      gateway_ip:  { list_join: ['.',  [ { get_param: netRange }, '1' ]] }
      allocation_pools: [{'end': { list_join: ['.',  [ { get_param: netRange }, '254' ]] }, 'start': { list_join: ['.',  [ { get_param: netRange }, '9' ]] } }]

  cloudNetGWInstance01NonHAPort:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address': { list_join: ['.',  [ { get_param: netRange }, '2' ]]  } }]
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }

  cloudNetGWInstance02NonHAPort:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address': { list_join: ['.',  [ { get_param: netRange }, '3' ]] } }]
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }

  cloudNetSharedIP:
    type: Rackspace::Cloud::SharedIP
    properties:
      ip_address: { get_attr: [cloudNetSubnet, gateway_ip] }
      network_id: { get_attr: [cloudNetSubnet, network_id] }
      ports: [{ get_resource: cloudNetGWInstance01NonHAPort }, { get_resource: cloudNetGWInstance02NonHAPort } ]


  cloudNetSharedIPAssociation:
    type: Rackspace::Cloud::AssociateSharedIP
    properties:
      shared_ip:  { get_attr: [ cloudNetSharedIP, shared_ip_address, ip_address, id ]}
      servers: [{ get_resource: gwInstance01}, {get_resource: gwInstance02 }]

  publicNetSharedIP:
    type: Rackspace::Cloud::SharedIP
    properties:
      network_id: 00000000-0000-0000-0000-000000000000
      ports: [{ get_attr: [ gwInstance01, addresses, public, 0, port ] }, { get_attr: [ gwInstance02, addresses, public, 0, port ] }]

  publicNetSharedIPAssociation:
    type: Rackspace::Cloud::AssociateSharedIP
    properties:
      shared_ip:  { get_attr: [ publicNetSharedIP, shared_ip_address, ip_address, id ]}
      servers: [{ get_resource: gwInstance01}, {get_resource: gwInstance02 }]

#begin Gateway Instance resources

  gwPass:
      type: OS::Heat::RandomString

  stackSSHKey:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

  gwConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
                    #!/bin/bash
                    systemctl stop firewalld; systemctl mask firewalld
                    systemctl enable iptables; systemctl start iptables
                    systemctl enable ip6tables; systemctl start ip6tables
                    cat > /etc/sysctl.d/30-fwd.conf << EOF
                    net.ipv4.ip_forward = 1
                    EOF
                    sysctl -p /etc/sysctl.d/30-fwd.conf
                    sed -i '/DEFROUTE/d' /etc/sysconfig/network-scripts/ifcfg-eth2
                    sed -i '/GATEWAY/d' /etc/sysconfig/network-scripts/ifcfg-eth2
                    echo 'DEFROUTE=yes' >> /etc/sysconfig/network-scripts/ifcfg-eth0
                    systemctl restart network
                    cat > /etc/sysconfig/iptables << EOF
                    *nat
                    :PREROUTING ACCEPT [0:0]
                    :INPUT ACCEPT [0:0]
                    :OUTPUT ACCEPT [0:0]
                    :POSTROUTING ACCEPT [0:0]
                    -A POSTROUTING -o eth0 -j MASQUERADE
                    COMMIT
                    *filter
                    :INPUT ACCEPT [0:0]
                    :FORWARD ACCEPT [0:0]
                    :OUTPUT ACCEPT [0:0]
                    -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
                    -A INPUT -p icmp -j ACCEPT
                    -A INPUT -i lo -j ACCEPT
                    -A INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 22 -j ACCEPT
                    -A INPUT -s $net_range.0/24 -j ACCEPT
                    -A FORWARD -s $net_range.0/24 -j ACCEPT
                    -A FORWARD -i eth0 -o eth2 -m state --state RELATED,ESTABLISHED -j ACCEPT
                    -A FORWARD -i eth2 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
                    -A INPUT -j REJECT --reject-with icmp-host-prohibited
                    -A FORWARD -j REJECT --reject-with icmp-host-prohibited
                    COMMIT
                    EOF
                    chmod 600 /etc/sysconfig/iptables
                    iptables-restore < /etc/sysconfig/iptables
          params:
            $net_range : { get_param: netRange }

  gwInstance01:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $gw01
          params:
              $gw: { get_param: gwName }
      image: CentOS 7 (PVHVM) (Orchestration)
      admin_pass: { get_attr: [ gwPass, value ] }
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: gwFlavor }
      config_drive: True
      user_data: { get_resource: gwConfig }
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'
        - port: { get_resource: cloudNetGWInstance01NonHAPort }
      metadata:
        created_by: cn_orch_template

  gwInstance02:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $gw02
          params:
              $gw: { get_param: gwName }
      image: CentOS 7 (PVHVM) (Orchestration)
      admin_pass: { get_attr: [ gwPass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: gwFlavor }
      config_drive: True
      user_data: { get_resource: gwConfig }
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'
        - port: { get_resource: cloudNetGWInstance02NonHAPort }

outputs:
  cloudNetworkName:
    value: { get_attr: [cloudNet, name] }
    description: 'Cloud Network name'

  cloudNetworkRange:
    value: { get_attr: [cloudNetSubnet, cidr] }
    description: 'Cloud Network range'

  dnsIPs:
    value: { get_attr: [cloudNetSubnet, dns_nameservers] }
    description: 'DNS Server IPs'

  gw01PublicIPs:
      value: { get_attr: [gwInstance01, networks, public] }
      description: 'Public IPs of Gateway Instance 01'

  gw02PublicIPs:
      value: { get_attr: [gwInstance02, networks, public] }
      description: 'Public IPs of Gateway Instance 02'

  gwPassDisplay:
    value: { get_attr: [gwPass, value ] }
    description: 'Admin Password of Gateway Instances'

  stackPrivateSSHKey:
    value: { get_attr: ['stackSSHKey', 'private_key'] }
    description: 'private Key for accessing Gateway Instance'
